{"version":3,"sources":["apis/jsonPlaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","reducers/index.js","reducers/postsReducer.js","reducers/usersReducer.js","index.js"],"names":["axios","create","baseURL","fetchPosts","dispatch","a","jsonPlaceHolder","get","response","type","payload","data","fetchUser","id","UserHeader","user","this","props","className","name","React","Component","connect","state","ownProps","users","find","userId","PostList","fetchPostsAndUsers","posts","map","post","title","body","renderList","getState","console","log","_","chain","uniq","forEach","value","App","combineReducers","action","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"mPAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,yCCWAC,EAAa,yDAAM,WAAMC,GAAN,eAAAC,EAAA,sEACDC,EAAgBC,IAAI,UADnB,OAClBC,EADkB,OAGxBJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASG,OAH1B,2CAAN,uDAMbC,EAAY,SAAAC,GAAE,8CAAI,WAAMT,GAAN,eAAAC,EAAA,sEACJC,EAAgBC,IAAhB,iBAA8BM,IAD1B,OACrBL,EADqB,OAG3BJ,EAAS,CAAEK,KAAM,aAAcC,QAASF,EAASG,OAHtB,2CAAJ,uDCjBrBG,E,uKACQ,IACEC,EAASC,KAAKC,MAAdF,KAEJ,OAAKA,EAKT,qBAAKG,UAAU,SAAf,SAAyBH,EAAKI,OAJf,S,GALEC,IAAMC,WAkBhBC,eAJS,SAACC,EAAOC,GAC5B,MAAO,CAAET,KAAMQ,EAAME,MAAMC,MAAK,SAAAX,GAAI,OAAIA,EAAKF,KAAOW,EAASG,aAGlDL,CAAyBR,GChBlCc,E,kLAEEZ,KAAKC,MAAMY,uB,mCAIX,OAAOb,KAAKC,MAAMa,MAAMC,KAAI,SAAAC,GACxB,OACI,sBAAKd,UAAU,OAAf,UACI,mBAAGA,UAAU,mCACb,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,cAAf,UACI,6BAAKc,EAAKC,QACV,4BAAID,EAAKE,UAEb,cAAC,EAAD,CAAYP,OAAQK,EAAKL,cAPNK,EAAKnB,S,+BAe5C,OAAO,qBAAKK,UAAU,0BAAf,SAA0CF,KAAKmB,mB,GAvBnCf,IAAMC,WA+BdC,eAJS,SAACC,GACrB,MAAO,CAAEO,MAAOP,EAAMO,SAGc,CAAED,mBFjCR,yDAAM,WAAOzB,EAAUgC,GAAjB,SAAA/B,EAAA,6DACpCgC,QAAQC,IAAI,wBADwB,SAE9BlC,EAASD,KAFqB,OAIpCoC,IAAEC,MAAMJ,IAAWN,OAClBC,IAAI,UACJU,OACAC,SAAQ,SAAA7B,GAAE,OAAIT,EAASQ,EAAUC,OACjC8B,QARmC,2CAAN,0DEiCnBrB,CAAiDM,GCzBjDgB,EARH,WACR,OACI,qBAAK1B,UAAU,eAAf,SACI,cAAC,EAAD,O,QCFG2B,cAAgB,CAC3Bf,MCLW,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIuB,EAAW,uCACpC,OAAQA,EAAOrC,MACd,IAAK,cACD,OAAOqC,EAAOpC,QAClB,QACI,OAAOa,IDCXE,MENW,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIuB,EAAW,uCACnC,OAAQA,EAAOrC,MACX,IAAK,aACD,MAAM,GAAN,mBAAWc,GAAX,CAAkBuB,EAAOpC,UAC7B,QACI,OAAOa,MCIbwB,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJO,SAASC,cAAc,Y","file":"static/js/main.dd19c319.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://jsonplaceholder.typicode.com'\n});","import _ from 'lodash';\nimport jsonPlaceHolder from '../apis/jsonPlaceholder';\n\nexport const fetchPostsAndUsers = () => async (dispatch, getState) => {\n    console.log('about to fetch posts')\n    await dispatch(fetchPosts());\n\n    _.chain(getState().posts)\n    .map('userId')\n    .uniq()\n    .forEach(id => dispatch(fetchUser(id)))\n    .value();\n};\n\nexport const fetchPosts = () => async dispatch => {\n        const response = await jsonPlaceHolder.get('/posts');\n\n        dispatch({ type: 'FETCH_POSTS', payload: response.data })\n    };\n\nexport const fetchUser = id => async dispatch => {\n    const response = await jsonPlaceHolder.get(`/users/${id}`)\n\n    dispatch({ type: 'FETCH_USER', payload: response.data });\n};\n\n\n// Fetch with Memoize\n\n// export const fetchUser = id => dispatch => {\n//     _fetchUser(id, dispatch);\n// };\n\n// const _fetchUser = _.memoize(async (id, dispatch) => {\n//     const response = await jsonPlaceHolder.get(`/users/${id}`)\n\n//     dispatch({ type: 'FETCH_USER', payload: response.data });\n// });","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass UserHeader extends React.Component {\n    render() {\n        const { user } = this.props;\n\n            if (!user) {\n                return null;\n            }\n\n        return (\n        <div className=\"header\">{user.name}</div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return { user: state.users.find(user => user.id === ownProps.userId) };\n};\n\nexport default connect(mapStateToProps)(UserHeader);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPostsAndUsers } from '../actions';\nimport UserHeader from './UserHeader'\n\nclass PostList extends React.Component {\n    componentDidMount() {\n        this.props.fetchPostsAndUsers();\n    }\n\n    renderList() {\n        return this.props.posts.map(post => {\n            return (\n                <div className=\"item\" key={post.id}>\n                    <i className=\"large middle aligned icon user\" />\n                    <div className=\"content\">\n                        <div className=\"description\">\n                            <h2>{post.title}</h2>\n                            <p>{post.body}</p>\n                        </div>\n                        <UserHeader userId={post.userId}/>\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    render() {\n    return <div className='ui relaxed divided list'>{this.renderList()}</div>\n    };\n};\n\nconst mapStateToProps = (state) => {\n    return { posts: state.posts };\n}\n\nexport default connect(mapStateToProps, { fetchPostsAndUsers })(PostList);","import React from 'react';\nimport PostList from './PostList';\n\nconst App = () => {\n    return (\n        <div className=\"ui container\">\n            <PostList />\n        </div>\n    );\n};\n\nexport default App;","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\n\nexport default combineReducers({\n    posts: postsReducer,\n    users: usersReducer\n});","export default (state = [], action) => {\n   switch (action.type) {\n    case \"FETCH_POSTS\":\n        return action.payload;\n    default: \n        return state;\n   }\n};","export default (state = [], action) => {\n    switch (action.type) {\n        case \"FETCH_USER\":\n            return [...state, action.payload];\n        default: \n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#root')\n);"],"sourceRoot":""}